{"version":3,"sources":["serviceWorker.ts","pages/Home.tsx","components/ButtonScore/index.tsx","components/CheckupBoard/index.tsx","components/ButtonMove/index.ts","pages/Test.tsx","shared/App.tsx","client/Root.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ButtonStart","styled","Link","HomePage","to","Wrapper","button","ButtonScore","children","onClick","div","CheckupBoard","onSelectScore","makeOnClick","score","ButtonMove","Header","NumPage","span","Question","strong","TestPage","state","step","scoreList","this","setState","handleOnSelectScore","React","bind","App","exact","path","component","Root","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mVCdN,IAAMC,EAAcC,YAAOC,IAAPD,CAAH,KAsBFE,EAVE,WACf,OACE,6BACE,kBAACH,EAAD,CAAaI,GAAG,SAAhB,sC,iNCZN,IAAMC,EAAUJ,IAAOK,OAAV,KAiBEC,EARiC,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAC1D,OACE,kBAACJ,EAAD,CAASI,QAASA,GACfD,I,gHCXP,IAAMH,EAAUJ,IAAOS,IAAV,KAkCEC,EA5BmC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnD,SAASC,EAAYC,GACnB,OAAO,WACLF,EAAcE,IAIlB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAaL,QAASI,EAAY,IAAlC,KAGA,kBAAC,EAAD,CAAaJ,QAASI,EAAY,IAAlC,KAGA,kBAAC,EAAD,CAAaJ,QAASI,EAAY,IAAlC,KAGA,kBAAC,EAAD,CAAaJ,QAASI,EAAY,IAAlC,KAGA,kBAAC,EAAD,CAAaJ,QAASI,EAAY,IAAlC,O,2OCjCN,I,EAUeE,EAVId,IAAOK,OAAV,K,spBCahB,IAAMU,EAASf,IAAOS,IAAV,KAMNO,EAAUhB,IAAOiB,KAAV,KAYPC,EAAWlB,IAAOmB,OAAV,KAiDCC,G,6MArCJC,MAAiC,CACxCC,KAAM,EACNC,UAAW,I,mFAIOV,GAClBW,KAAKC,UACH,SAACJ,GAAD,MAAY,CACVC,KAAMD,EAAMC,KAAO,EACnBC,UAAU,GAAD,mBACJF,EAAME,WADF,CAEPV,U,+BAME,IAAD,EACqBW,KAAKH,MAAzBC,EADD,EACCA,KAAMC,EADP,EACOA,UACd,OACE,2BACE,gBAACR,EAAD,KACE,gBAAC,EAAD,iCACA,gBAACC,EAAD,KAAUM,EAAV,SACA,gBAAC,EAAD,kCAEF,uCAAeC,GAEf,gBAACL,EAAD,8EAEA,gBAAC,EAAD,CAAcP,cAAea,KAAKE,2B,GAhCnBC,a,+CAMpBC,K,iLC7CH,IAAMxB,EAAUJ,IAAOS,IAAV,KAeEoB,E,iLATX,OACE,gBAAC,EAAD,KACE,gBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,gBAAC,IAAD,CAAO6B,KAAK,QAAQC,UAAWZ,S,GALrBO,aCGHM,EARQ,WACrB,OACE,kBAAC,IAAD,CAAeC,SAAS,oBACtB,kBAAC,EAAD,QCDNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SRqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.19f57b07.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport styled from \"styled-components\";\nimport {Link} from \"react-router-dom\";\n\nconst ButtonStart = styled(Link)`\n  width: 170px;\n  height: 70px;\n  border-radius: 40px;\n  color: #fff;\n  background-color: #ffd307;\n  line-height: 70px;\n  text-align: center;\n  font-size: 18px;\n  display: inline-block;\n`;\n\nconst HomePage = () => {\n  return (\n    <div>\n      <ButtonStart to=\"/test\">\n        테스트 시작!\n      </ButtonStart>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport styled from \"styled-components\";\n\ninterface ButtonScoreProps {\n  onClick: () => void;\n}\n\nconst Wrapper = styled.button`\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  font-size: 36px;\n  color: #fff;\n  background-color: #e5e5e5;\n`;\n\nconst ButtonScore: React.FC<ButtonScoreProps> = ({children, onClick}) => {\n  return (\n    <Wrapper onClick={onClick}>\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default ButtonScore;\n","import React from 'react';\nimport ButtonScore from \"../ButtonScore\";\nimport styled from \"styled-components\";\n\ninterface CheckupBoardProps {\n  onSelectScore: (score: number) => void;\n}\n\nconst Wrapper = styled.div`\n  button {\n    margin-right: 5px;\n  }\n`;\n\nconst CheckupBoard: React.FC<CheckupBoardProps> = ({ onSelectScore }) => {\n  function makeOnClick(score: number) {\n    return () => {\n      onSelectScore(score);\n    }\n  }\n\n  return (\n    <Wrapper>\n      <ButtonScore onClick={makeOnClick(1)}>\n        1\n      </ButtonScore>\n      <ButtonScore onClick={makeOnClick(2)}>\n        2\n      </ButtonScore>\n      <ButtonScore onClick={makeOnClick(3)}>\n        3\n      </ButtonScore>\n      <ButtonScore onClick={makeOnClick(4)}>\n        4\n      </ButtonScore>\n      <ButtonScore onClick={makeOnClick(5)}>\n        5\n      </ButtonScore>\n    </Wrapper>\n  );\n};\n\nexport default CheckupBoard;\n","import styled from \"styled-components\";\n\nconst ButtonMove = styled.button`\n  padding: 5px;\n  font-size: 18px;\n  color: #444;\n  border: 0 none;\n  border-radius: 0;\n  background-color: transparent;\n  cursor: pointer;\n`;\n\nexport default ButtonMove;\n","import * as React from 'react';\nimport CheckupBoard from \"../components/CheckupBoard\";\nimport bind from \"bind-decorator\";\nimport styled from \"styled-components\";\nimport ButtonMove from \"../components/ButtonMove\";\n\ninterface TestPageProps {\n\n}\n\ninterface TestPageState {\n  step: number;\n  scoreList: number[]\n}\n\nconst Header = styled.div`\n  margin-top: 41px;\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nconst NumPage = styled.span`\n  display: inline-block;\n  height: 32px;\n  padding: 0 16px;\n  font-size: 15px;\n  line-height: 31px;\n  color: #fff;\n  background-color: #434343;\n  border-radius: 15px;\n  vertical-align: top;\n`;\n\nconst Question = styled.strong`\n  display: block;\n  margin: 15px 0 50px;\n  font-weight: normal;\n  font-size: 30px;\n  line-height: 40px;\n  color: #444;\n  word-break: break-all;\n  white-space: pre-line;\n`;\n\nclass TestPage extends React.Component<TestPageProps, TestPageState> {\n  readonly state: Readonly<TestPageState> = {\n    step: 0,\n    scoreList: [],\n  };\n\n  @bind\n  handleOnSelectScore(score: number) {\n    this.setState(\n      (state) => ({\n        step: state.step + 1,\n        scoreList: [\n          ...state.scoreList,\n          score,\n        ],\n      }),\n    );\n  }\n\n  render() {\n    const { step, scoreList } = this.state;\n    return (\n      <div>\n        <Header>\n          <ButtonMove>이전으로</ButtonMove>\n          <NumPage>{step} / 10</NumPage>\n          <ButtonMove>처음으로</ButtonMove>\n        </Header>\n        <p>scoreList: {scoreList}</p>\n\n        <Question>삶의 의미를 느끼지 못한다</Question>\n\n        <CheckupBoard onSelectScore={this.handleOnSelectScore} />\n      </div>\n    );\n  }\n}\n\nexport default TestPage;\n","import * as React from 'react';\nimport {Route} from 'react-router-dom';\nimport {HomePage, TestPage} from \"../pages\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  text-align: center;\n`;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Wrapper>\n        <Route exact path=\"/\" component={HomePage}/>\n        <Route path=\"/test\" component={TestPage}/>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport App from \"../shared/App\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nconst Root: React.FC = () => {\n  return (\n    <BrowserRouter basename=\"/resilience-test\">\n      <App/>\n    </BrowserRouter>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from \"./client/Root\";\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}