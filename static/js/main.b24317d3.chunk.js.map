{"version":3,"sources":["serviceWorker.ts","pages/Home.tsx","components/ButtonScore/index.ts","components/CheckupBoard/index.tsx","components/ButtonMove/index.ts","constants.ts","pages/Test.tsx","pages/Result.tsx","pages/BookInfo.tsx","shared/App.tsx","client/Root.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Wrapper","styled","div","Header","h1","Divider","hr","Description","p","ButtonStart","Link","HomePage","to","ButtonScore","button","selected","CheckupBoard","selectedValue","disabled","onSelectScore","makeOnClick","score","undefined","onClick","ButtonMove","QUESTION","TOTAL_QUESTION_COUNT","length","NumPage","span","Question","strong","TestPage","state","step","scoreList","isLoading","this","setState","splice","setTimeout","props","history","push","handleOnPrevStep","handleOnInitStep","selectedScore","handleOnSelectScore","Number","React","bind","ResultPage","BookInfoPage","App","exact","path","component","Root","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b24317d3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport styled from \"styled-components\";\nimport {Link} from \"react-router-dom\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Header = styled.h1`\n  text-align: left;\n`;\n\nconst Divider = styled.hr`\n  width: 50vw;\n`;\n\nconst Description = styled.p`\n  text-align: left;\n`;\n\nconst ButtonStart = styled(Link)`\n  width: 170px;\n  height: 70px;\n  border-radius: 40px;\n  color: #fff;\n  background-color: #ffd307;\n  line-height: 70px;\n  text-align: center;\n  font-size: 18px;\n  display: inline-block;\n`;\n\nconst HomePage = () => {\n  return (\n    <Wrapper>\n      <Header>\n        나의 회복탄력성 지수는?<br/>\n        &lt;KRQ-53 테스트&gt;\n      </Header>\n      <Divider/>\n      <div>\n        <Description>\n          <strong>응답 방법: </strong>\n          각 문항을 읽은 후 다음과 같이 점수를 기록한다.\n        </Description>\n        <Description>\n          전혀 그렇지 않다 1 / 그렇지 않다 2 / 보통이다 3 / 어느 정도 그렇다 4 / 매우 그렇다 5\n        </Description>\n\n        <ButtonStart to=\"/test\">\n          테스트 시작!\n        </ButtonStart>\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default HomePage;\n","import styled from \"styled-components\";\n\nconst ButtonScore = styled.button<{ selected?: boolean }>`\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  font-size: 36px;\n  color: #fff;\n  background-color: ${({ selected }) => selected ? '#FFD307' : '#e5e5e5'};\n`;\n\nexport default ButtonScore;\n","import React from 'react';\nimport ButtonScore from \"../ButtonScore\";\nimport styled from \"styled-components\";\n\ninterface CheckupBoardProps {\n  selectedValue?: number;\n  disabled?: boolean;\n\n  onSelectScore: (score: number) => void;\n}\n\nconst Wrapper = styled.div`\n  button {\n    margin-right: 5px;\n  }\n`;\n\nconst Description = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n`;\n\nconst CheckupBoard: React.FC<CheckupBoardProps> = ({ selectedValue, disabled, onSelectScore }) => {\n  function makeOnClick(score: number) {\n    return () => {\n      onSelectScore(score);\n    }\n  }\n\n  return (\n    <Wrapper>\n      <div>\n        <ButtonScore\n          selected={selectedValue ? selectedValue >= 1 : undefined}\n          disabled={disabled}\n          onClick={makeOnClick(1)}\n        >\n          1\n        </ButtonScore>\n        <ButtonScore\n          selected={selectedValue ? selectedValue >= 2 : undefined}\n          disabled={disabled}\n          onClick={makeOnClick(2)}\n        >\n          2\n        </ButtonScore>\n        <ButtonScore\n          selected={selectedValue ? selectedValue >= 3 : undefined}\n          disabled={disabled}\n          onClick={makeOnClick(3)}\n        >\n          3\n        </ButtonScore>\n        <ButtonScore\n          selected={selectedValue ? selectedValue >= 4 : undefined}\n          disabled={disabled}\n          onClick={makeOnClick(4)}\n        >\n          4\n        </ButtonScore>\n        <ButtonScore\n          selected={selectedValue ? selectedValue >= 5 : undefined}\n          disabled={disabled}\n          onClick={makeOnClick(5)}\n        >\n          5\n        </ButtonScore>\n      </div>\n      <Description>\n        <strong>전혀 그렇지 않다</strong>\n        <strong>매우 그렇다</strong>\n      </Description>\n    </Wrapper>\n  );\n};\n\nexport default CheckupBoard;\n","import styled from \"styled-components\";\n\nconst ButtonMove = styled.button`\n  padding: 5px;\n  font-size: 18px;\n  color: #444;\n  border: 0 none;\n  border-radius: 0;\n  background-color: transparent;\n  cursor: pointer;\n`;\n\nexport default ButtonMove;\n","export const QUESTION = [\n  '각 문항을 읽은 후 다음과 같이 점수를 기록하세요.',\n  '1. 나는 어려운 일이 닥쳤을 때 감정을 통제할 수 있다.',\n  '2. 내가 무슨 생각을 하면, 그 생각이 내 기분에 어떤 영향을 미칠지 잘 알아챈다.',\n  '3. 논쟁거리가 되는 문제를 가족이나 친구들과 토론할 때 내 감정을 잘 통제할 수 있다.',\n  '4. 집중해야 할 중요한 일이 생기면 신바람이 나기보다는 더 스트레스를 받는 편이다.',\n  '5. 나는 내 감정에 잘 휘말린다.',\n  '6. 때때로 내 감정적인 문제 때문에 학교나 직장에서 공부하거나 일할 때 집중하기 힘들다.',\n  '7. 당장 해야 할 일이 있으면 나는 어떠한 유혹이나 방해도 잘 이겨내고 할 일을 한다.',\n  '8. 아무리 당황스럽고 어려운 상황이 닥쳐도, 나는 내가 어떤 생각을 하고 있는지 스스로 잘 안다.',\n  '9. 누군가가 나에게 화를 낼 경우 나는 우선 그 사람의 의견을 잘 듣는다.',\n  '10. 일이 생각대로 잘 안 풀리면 쉽게 포기하는 편이다.',\n  '11. 평소 경제적인 소비나 지출 규모에 대해 별다른 계획 없이 지낸다.',\n  '12. 미리 계획을 세우기보다는 즉흥적으로 일을 처리하는 편이다.',\n  '13. 문제가 생기면 여러 가지 가능한 해결 방안에 대해 먼저 생각한 후에 해결하려고 노력한다.',\n  '14. 어려운 일이 생기면 그 원인이 무엇인지 신중하게 생각한 후에 해결하려고 노력한다.',\n  '15. 나는 대부분의 상황에서 문제의 원인을 잘 알고 있다고 믿는다.',\n  '16. 나는 사건이나 상황을 잘 파악하지 못한다는 이야기를 종종 듣는다,',\n  '17. 문제가 생기면 나는 성급하게 결론을 내린다는 이야기를 종종 듣는다.',\n  '18. 어려운 일이 생기면, 그 원인을 완전히 이해하지 못했다 하더라도 일단 빨리 해결하는 것이 좋다고 생각한다.',\n  '19. 나는 분위기나 대화 상대에 따라 대화를 잘 이끌어 나갈 수 있다.',\n  '20. 나는 재치 있는 농담을 잘 한다.',\n  '21. 나는 내가 표현하고자 하는 바에 대한 적절한 문구나 단어를 잘 찾아낸다.',\n  '22. 나는 윗사람과 대화하는 것이 부담스럽다.',\n  '23. 나는 대화중에 다른 생각을 하느라 대화 내용을 놓칠 때가 종종 있다.',\n  '24. 대화를 할 때 하고 싶은 말을 다 하지 못하고 주저할 때가 종종 있다.',\n  '25. 사람들의 얼굴 표정을 보면 어떤 감정인지 알 수 있다.',\n  '26. 슬퍼하거나 화를 내거나 당황하는 사람을 보면 그들이 어떤 생각을 하는지 잘 알 수 있다.',\n  '27. 동료가 화를 낼 경우 나는 그 이유를 잘 아는 편이다.',\n  '28. 나는 사람들의 행동 방식을 때로 이해하기 힘들다.',\n  '29. 친한 친구나 애인 혹은 배우자로부터 \"당신은 나를 이해 못해\"라는 말을 종종 듣는다.',\n  '30. 동료와 친구들은 내가 자기 말을 잘 듣지 않는다고 한다.',\n  '31. 나는 내 주변 사람들로부터 사랑과 관심을 받고 있다.',\n  '32. 나는 내 친구들을 정말 좋아한다.',\n  '33. 내 주변 사람들은 내 기분을 잘 이해한다.',\n  '34. 서로 도움을 주고받는 친구가 별로 없다.',\n  '35. 나와 정기적으로 만나는 사람들은 대부분 나를 싫어하게 된다.',\n  '36. 서로 마음을 터놓고 얘기할 수 있는 친구가 거의 없다.',\n  '37. 열심히 일하면 언젠가 보담이 있으리라고 생각한다.',\n  '38. 맞든 아니든, \"아무리 어려운 문제라도 나는 해결할 수 있다\"고 일단 믿는 것이 좋다고 생각한다.',\n  '39. 어려운 상황이 닥쳐도 나는 모든 일이 다 잘 해결될 거라고 확신한다.',\n  '40. 내가 어떤 일을 마치고 나면, 주변 사람들이 부정적인 평가를 할까봐 걱정한다.',\n  '41. 나에게 일어나는 대부분의 문제들은 나로서는 어쩔 수 없는 상황에 의해 발생한다고 믿는다.',\n  '42. 누가 나의 미래에 대해 물어보면, 성공한 나의 모습을 상상하기 힘들다.',\n  '43. 내 삶은 내가 생각하는 이상적인 삶에 가깝다.',\n  '44. 내 인생의 여러 가지 조건들은 만족스럽다.',\n  '45. 나는 내 삶에 만족한다.',\n  '46. 나는 내 삶에서 중요하다고 생각한 것들은 다 갖고 있다.',\n  '47. 나는 다시 태어나도 나의 현재 삶을 다시 살고 싶다.',\n  '48. 나는 다양한 종류의 많은 사람들에게 고마움을 느낀다.',\n  '49. 내가 고맙게 여기는 것들을 모두 적는다면, 아주 긴 목록이 될 것이다.',\n  '50. 나이가 들어갈수록 내 삶의 일부가 된 사람, 사건, 생활에 대해 감사하는 마음이 더 켜져간다.',\n  '51. 나는 감사해야 할 것이 별로 없다.',\n  '52. 세상을 둘러볼 때, 내가 고마워 할 것은 별로 없다.',\n  '53. 사람이나 일에 대한 고마움을 한참 시간이 지난 후에야 겨우 느낀다.',\n];\n\nexport const TOTAL_QUESTION_COUNT = QUESTION.length - 1;\n","import * as React from 'react';\nimport CheckupBoard from \"../components/CheckupBoard\";\nimport bind from \"bind-decorator\";\nimport styled from \"styled-components\";\nimport ButtonMove from \"../components/ButtonMove\";\nimport {QUESTION, TOTAL_QUESTION_COUNT} from \"../constants\";\nimport { RouteComponentProps } from 'react-router-dom';\n\ninterface TestPageProps extends RouteComponentProps {\n\n}\n\ninterface TestPageState {\n  step: number;\n  scoreList: number[];\n  isLoading: boolean;\n}\n\nconst Wrapper = styled.div`\n  max-width: 700px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Header = styled.div`\n  margin-top: 41px;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst NumPage = styled.span`\n  display: inline-block;\n  height: 32px;\n  padding: 0 16px;\n  font-size: 15px;\n  line-height: 31px;\n  color: #fff;\n  background-color: #434343;\n  border-radius: 15px;\n  vertical-align: top;\n`;\n\nconst Question = styled.strong`\n  display: block;\n  margin: 15px 0 50px;\n  font-weight: bold;\n  font-size: 30px;\n  line-height: 40px;\n  color: #444;\n  word-break: break-all;\n  white-space: pre-line;\n  max-width: 700px;\n`;\n\nclass TestPage extends React.Component<TestPageProps, TestPageState> {\n  readonly state: Readonly<TestPageState> = {\n    step: 1,\n    scoreList: [],\n    isLoading: false,\n  };\n\n  get selectedScore() {\n    const { step, scoreList } = this.state;\n    return Number(scoreList[step - 1]) || undefined;\n  }\n\n  @bind\n  handleOnSelectScore(score: number) {\n    this.setState(\n      (state) => ({\n        scoreList: [\n          ...state.scoreList.splice(0, state.step - 1),\n          score,\n        ],\n        isLoading: true,\n      }),\n      () => {\n        setTimeout(\n          () => {\n            if (this.state.step === TOTAL_QUESTION_COUNT) {\n              this.props.history.push('/result');\n            } else {\n              this.setState(\n                (state) => ({\n                  step: state.step + 1,\n                  isLoading: false,\n                }),\n              );\n            }\n          },\n          1000,\n        );\n      }\n    );\n  }\n\n  @bind\n  handleOnPrevStep() {\n    this.setState(\n      (state) => ({\n        step: state.step - 1,\n        scoreList: state.scoreList.splice(0, state.step - 1),\n      }),\n    )\n  }\n\n  @bind\n  handleOnInitStep() {\n    this.setState(\n      {\n        step: 1,\n        scoreList: [],\n      },\n    )\n  }\n\n  render() {\n    const { step, scoreList, isLoading } = this.state;\n    return (\n      <Wrapper>\n        <Header>\n          {\n            step !== 1 &&\n            <ButtonMove onClick={this.handleOnPrevStep}>이전으로</ButtonMove>\n          }\n          <NumPage>{step} / {TOTAL_QUESTION_COUNT}</NumPage>\n          {\n            step !== 1 &&\n            <ButtonMove onClick={this.handleOnInitStep}>처음으로</ButtonMove>\n          }\n        </Header>\n        <p>scoreList: {scoreList}</p>\n\n        <Question>{QUESTION[step]}</Question>\n\n        <CheckupBoard\n          selectedValue={this.selectedScore}\n          disabled={isLoading}\n          onSelectScore={this.handleOnSelectScore}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default TestPage;\n","import React from 'react';\n\nconst ResultPage: React.FC = () => {\n  return (\n    <div>\n      테스트 결과 페이지\n    </div>\n  );\n};\n\nexport default ResultPage;\n\n","import * as React from \"react\";\n\nconst BookInfoPage: React.FC = () => (\n  <div>\n    참고한 책에 대해 표지 이미지와 간략한 정보를 소개하고,\n    페이지에 내용은 이 책에서 비롯된 내용임을 알려주는 페이지입니다.\n\n    우와 정말 데단해~\n  </div>\n);\n\nexport default BookInfoPage;\n","import * as React from 'react';\nimport {Route} from 'react-router-dom';\nimport {BookInfoPage, HomePage, ResultPage, TestPage} from \"../pages\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  text-align: center;\n`;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Wrapper>\n        <Route exact path=\"/\" component={HomePage}/>\n        <Route path=\"/test\" component={TestPage}/>\n        <Route path=\"/result\" component={ResultPage}/>\n        <Route path=\"/book-info\" component={BookInfoPage}/>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport App from \"../shared/App\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nconst Root: React.FC = () => {\n  return (\n    <BrowserRouter basename=\"/resilience-test\">\n      <App/>\n    </BrowserRouter>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from \"./client/Root\";\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}